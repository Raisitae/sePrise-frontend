"use client";
/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/Ta3mluStKRK
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Libre_Franklin } from 'next/font/google'
import { Chivo } from 'next/font/google'

libre_franklin({
  subsets: ['latin'],
  display: 'swap',
})

chivo({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { CardContent, Card } from "@/components/ui/card";
import { useState } from "react";
import { MouseEventHandler } from "react";
import Link from "next/link";

interface appointmentProps {
  type: string;
}

export function Searchappointment({ type }: appointmentProps) {
  let text: string = type;
  let textUpper = text.charAt(0);
  textUpper = textUpper.toUpperCase() + text.slice(1);

  const [confirmAppointmentData, setConfirmAppointmentData] = useState({
    ssn: "",
    appointments: [],
  });

  const [showResults, setShowResults] = useState(false);

  const handleConfirmAppointmentChange = (field, value) => {
    setConfirmAppointmentData({
      ...confirmAppointmentData,
      [field]: value,
    });
  };

  const handleConfirmAppointmentSubmit: MouseEventHandler<HTMLButtonElement> = (
    e
  ) => {
    e.preventDefault();
    const appointments = [
      { id: 1, date: "2023-06-15", time: "10:00 AM", doctor: "Dr. Smith" },
      { id: 2, date: "2023-06-22", time: "2:30 PM", doctor: "Dr. Johnson" },
      { id: 3, date: "2023-07-01", time: "9:00 AM", doctor: "Dr. Williams" },
    ];
    setConfirmAppointmentData({
      ...confirmAppointmentData,
      appointments: appointments,
    });
    setShowResults(true);
  };

  const handleConfirmAppointment = (appointmentId) => {
    setConfirmAppointmentData({
      ...confirmAppointmentData,
      appointments: confirmAppointmentData.appointments.filter(
        (appointment) => appointment.id !== appointmentId
      ),
    });
  };
  return (
    <div className="flex min-h-[100dvh] flex-col items-center justify-center bg-gray-100 px-4 dark:bg-gray-950">
      <div className="mx-auto w-full max-w-4xl space-y-6 text-center">
        <div className="flex flex-col items-center justify-between">
          <Link
            id={text}
            className="flex items-center gap-2 text-lg font-semibold"
            href="/home">
            <ArrowLeftIcon className="h-5 w-5" />
            <span>Back</span>
          </Link>
          <h1 className="text-3xl font-bold tracking-tight mt-4">
            {textUpper} Appointment
          </h1>
          <p className="mt-2 text-gray-500 dark:text-gray-400">
            Enter your SSN to view and {text} your appointments.
          </p>
        </div>
        <Card className="mx-auto w-full max-w-xl">
          <CardContent>
            <form className="grid gap-4 py-4">
              <div className="grid items-center grid-cols-[1fr_auto] gap-4">
                <div className="relative">
                  <SearchIcon className="absolute left-2.5 top-2.5 h-4 w-4 text-gray-500 dark:text-gray-400" />
                  <Input
                    id="ssn"
                    value={confirmAppointmentData.ssn}
                    onChange={(e) =>
                      handleConfirmAppointmentChange("ssn", e.target.value)
                    }
                    className="w-full pl-8"
                    placeholder="Enter your SSN"
                  />
                </div>
                <Button
                  onClick={handleConfirmAppointmentSubmit}
                  className="bg-gray-900 text-gray-50 hover:bg-gray-900/90 focus-visible:ring-gray-950 dark:bg-gray-50 dark:text-gray-900 dark:hover:bg-gray-50/90 dark:focus-visible:ring-gray-300">
                  Search
                </Button>
              </div>
            </form>
          </CardContent>
        </Card>
        {showResults && (
          <div className="mx-auto w-full max-w-xl space-y-6">
            <Card>
              <CardContent>
                <div className="space-y-4">
                  <h2 className="text-2xl font-bold mt-2">Your Appointments</h2>
                  <div className="space-y-2">
                    {confirmAppointmentData.appointments.map((appointment) => (
                      <div
                        key={appointment.id}
                        className="flex items-center justify-between rounded-md bg-gray-100 p-4 dark:bg-gray-800">
                        <div>
                          <div className="font-medium">
                            {appointment.date} - {appointment.time}
                          </div>
                          <div className="text-gray-500 dark:text-gray-400">
                            {appointment.doctor}
                          </div>
                        </div>
                        <Button
                          variant="outline"
                          onClick={() =>
                            handleConfirmAppointment(appointment.id)
                          }
                          className="text-gray-900 hover:bg-gray-100 dark:text-gray-50 dark:hover:bg-gray-700">
                          {textUpper}
                        </Button>
                      </div>
                    ))}
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        )}
      </div>
    </div>
  );
}

function SearchIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <circle cx="11" cy="11" r="8" />
      <path d="m21 21-4.3-4.3" />
    </svg>
  );
}

function ArrowLeftIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <path d="m12 19-7-7 7-7" />
      <path d="M19 12H5" />
    </svg>
  );
}
